"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = getNodeFragmentShader;
function getNodeFragmentShader() {
  return "\n    // uniform vec3 node_color;\n    // uniform vec3 border_color;\n    // uniform float border_width;\n    // uniform float node_size;\n    // uniform float node_opacity;\n\n    // float drawDisk(float radius) {\n    //   return step(length(gl_PointCoord), radius);\n    // }\n\n    // void main() {\n      // gl_FragColor = vec4(node_color, node_opacity);\n      // float distance = length(2.0 * gl_PointCoord - 1.0);\n      // float overall_size = node_size + border_width;\n      // float inner_edge = node_size;\n      // float outer_edge = node_size + 2.0;\n      // float smooth_edge = smoothstep(inner_edge, outer_edge, distance * overall_size);\n      // gl_FragColor = ( vec4(border_color, 1.0) * smooth_edge) + ((1.0 - smooth_edge) * gl_FragColor);\n\n      // if (distance > 1.0) {\n      //   discard;\n      // }\n      \n    // }\n    \n    uniform vec3 node_color;\n    uniform vec3 border_color;\n    uniform float border_width;\n    uniform float node_size;\n    uniform float node_opacity;\n\n    void main()\n    {\n      vec2 p = gl_FragCoord.xy - gl_PointCoord.xy;\n      float d = length(p) - (node_size + border_width) + 1;\n      d = abs(d);\n      float a = 1.0\n      if(abs(d) > 0.0) a = exp(-d*d) * node_opacity;\n      gl_FragColor = vec4(0.5*border_color, a);\n\n      p = gl_FragCoord.xy - gl_PointCoord.xy;\n      d = length(p) - node_size + border_width;\n      d = abs(d);\n      a = 1.0\n      if(abs(d) > 0.0) a = exp(-d*d) * node_opacity;\n      gl_FragColor = vec4(border_color, a);\n\n      p = (gl_FragCoord.xy - gl_PointCoord.xy)/(node_size);\n      float z = 1.0 - length(p);\n      if (z < 0.0) discard;\n      gl_FragDepth = 0.5*gl_PointCoord.z + 0.5*(1.0 - z);\n      vec3 color = vec3(1.0, 0.0, 0.0);\n      vec3 normal = normalize(vec3(gl_PointCoord.xy, z));\n      vec3 direction = normalize(vec3(1.0, 1.0, 1.0));\n      float diffuse = max(0.0, dot(direction, normal));\n      float specular = pow(diffuse, 10.0);\n      gl_FragColor = vec4(max(diffuse*color, specular*vec3(1.0)), 1.0);\n    }\n\n  ";
}